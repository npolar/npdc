'use strict';

var config       = require('../config');
var gulp         = require('gulp');
var gulpif       = require('gulp-if');
var gutil        = require('gulp-util');
var sourcemaps   = require('gulp-sourcemaps');
var streamify    = require('gulp-streamify');
var watchify     = require('watchify');
var browserify   = require('browserify');
var uglify       = require('gulp-uglify');
var handleErrors = require('../util/handleErrors');
var concat       = require('concat-stream');
var file         = require('gulp-file');
var glob         = require('glob');

// Based on: http://blog.avisi.nl/2014/04/25/how-to-keep-a-fast-build-with-browserify-and-reactjs/
// http://stackoverflow.com/questions/29362583/possible-eventemitter-memory-leak-detected-with-gulp-watchify-factor-bundl
gulp.task('browserify', function () {

  var sources = config.src.apps.reduce(function(memo, entry) {
    return memo.concat(glob.sync('./'+entry));
  }, []);

  var bundler = browserify({
    // All our apps
    entries: sources,
    // Enable source maps
    debug: true
  }, watchify.args);

  var transforms = [
    // Enable require on non js files
    'partialify',
    // Expand angular DI to enable minififaction
    'browserify-ngannotate'
  ];

  var bundle = function () {
    gutil.log('Bundling...');

    // Enable factor-bundle plugin to create shared.js
    bundler.plugin('factor-bundle', { outputs: sources.map(function (o) {
      return write(o.replace(config.src.root, ''));
    })});

    // Browseriy
    var stream = bundler.bundle()
      .on('error', handleErrors)
      .pipe(write('_shared/shared.js'));

    gutil.log('Bundling done.');
    return stream;
  };

  /**
   * Returns a writable stream that allows you to pipe bundles generated by the factor-bundle
   * plugin through further downstream transformations.
   */
  var write = function (name) {
    return concat(function (content) {
        // create new vinyl file from content
        return file(name, content, { src: true })
        .pipe(streamify(sourcemaps.init({loadMaps: true})))
        .pipe(gulpif(global.isProd, uglify({ compress: { drop_console: true } })))
        .pipe(sourcemaps.write('./'))
        .pipe(gulp.dest(config.dist.root));
    });
  };

  // Add transforms to bundler
  transforms.forEach(function(transform) {
    bundler.transform(transform);
  });

  // Watch for changes and rebuild
  if ( !global.isProd ) {
    bundler = watchify(bundler);
    bundler.on('update', function () {
      return bundle();
    });
  }

  // Initial build
  return bundle();
});
